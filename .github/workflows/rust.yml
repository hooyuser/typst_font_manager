name: Rust

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      retry_windows:
        description: 'Retry Windows Build Only'
        required: false
        default: 'false'

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Release
    if: inputs.retry_windows != 'true' && !contains(github.event.head_commit.message, '[skip ci]')

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_suffix: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_suffix: macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_suffix: macos-apple-silicon

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Extract Binary Name from Cargo.toml
        id: binary_name
        run: |
          BINARY_NAME=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].targets[] | select(.kind[] == "bin") | .name')
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

      - name: Verify Binary Existence
        run: |
          echo "Checking if binary exists:"
          ls target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}

      - name: Archive Binary
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} artifacts/${{ env.BINARY_NAME }}_${{ matrix.artifact_suffix }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.artifact_suffix }}
          path: artifacts/${{ env.BINARY_NAME }}_${{ matrix.artifact_suffix }}

  build-windows:
    name: Build and Release (Windows)
    if: inputs.retry_windows == 'true' || !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x86_64-pc-windows-msvc

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-windows-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Build Release Binary
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Extract Binary Name from Cargo.toml
        shell: pwsh
        run: |
          $BINARY_NAME = (cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].targets[] | select(.kind[] == "bin") | .name')
          echo "BINARY_NAME=$BINARY_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Binary Existence
        run: |
          echo "Checking if binary exists:"
          dir target\x86_64-pc-windows-msvc\release\${{ env.BINARY_NAME }}.exe

      - name: Archive Binary
        run: |
          mkdir artifacts
          Copy-Item target\x86_64-pc-windows-msvc\release\${{ env.BINARY_NAME }}.exe artifacts\${{ env.BINARY_NAME }}_windows.exe

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-windows.exe
          path: artifacts\${{ env.BINARY_NAME }}_windows.exe

  release:
    name: Create GitHub Release
    if: github.ref == 'refs/heads/main'
    needs: [build, build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Artifacts
        run: ls -R artifacts

      - name: Create Git Tag
        run: |
          TAG="v$(date +%Y%m%d%H%M%S)"
          echo "TAG=${TAG}" >> $GITHUB_ENV
          git tag ${TAG}
          git push origin ${TAG}

      - name: Upload Binaries to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/${{ env.BINARY_NAME }}_linux
            artifacts/${{ env.BINARY_NAME }}_macos-intel
            artifacts/${{ env.BINARY_NAME }}_macos-apple-silicon
            artifacts/${{ env.BINARY_NAME }}_windows.exe
          tag_name: ${{ env.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
